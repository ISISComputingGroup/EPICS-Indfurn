Terminator = CR LF;

ReadTimeout = 2000;
ReplyTimeout = 5000;

getVersion {
    out "?ver";
    in "<%(\$1)#s";
    in "<%#s";
}

# PID controller setpoint
setSp {
    out ">pidSP %2f";
    in "<ack";
}

# PID controller setpoint readback
getSp {
    out "?pidSP";
    in "<pidsp %f";
}

# Temperature of thermocouple
getTcTemp {
    out "?tempTC";
    in "<temptc %f";
}

# pipe temp. from tmp36 AnalogDevices   
getPipeTemp {
    out "?tempP";
    in "<tempp %f";
}

# cap bank temp. from tmp36 AnalogDevices
getCapacitorTemp {
    out "?tempC";
    in "<tempc %f";
}

# switch element (fet) temp. from tmp36 AnalogDevices
getFetTemp {
    out "?tempS";
    in "<temps %f";
}


# All PID commands: Because you have to set all 3 parameters at a time, 
# update the values (from hardware) immediately after sending them.
getP {
    out "?pidTu";
    in "<pidtu %f %*f %*f";
}

getI {
    out "?pidTu";
    in "<pidtu %*f %f %*f";
}

getD {
    out "?pidTu";
    in "<pidtu %*f %*f %f";
}

setP {
    # Update PID params from hardware to ensure we don't send stale values
    out "?pidTu";
    in "<pidtu %(\$1P)f %(\$1I)f %(\$1D)f";
    
    # Do the send
    out ">pidTu %2f %(\$1I)2f %(\$1D)2f";
    in "<ack";
}

setI {
    # Update PID params from hardware to ensure we don't send stale values
    out "?pidTu";
    in "<pidtu %(\$1P)f %(\$1I)f %(\$1D)f";
    
    # Do the send
    out ">pidTu %(\$1P)2f %2f %(\$1D)2f";
    in "<ack";
}

setD {
    # Update PID params from hardware to ensure we don't send stale values
    out "?pidTu";
    in "<pidtu %(\$1P)f %(\$1I)f %(\$1D)f";
    
    # Do the send
    out ">pidTu %(\$1P)2f %(\$1I)2f %2f";
    in "<ack";
}

getSampleTime {
    out "?pidSt";
    in "<pidst %i";
}

setSampleTime {
    out ">pidSt %i";
    in "<ack";
}

getPidDir {
    out "?pidDir";
    in "<piddir %{p|n}";
}

setPidDir {
    out ">pidDir %{DIR|REV}";
    in "<ack";
}

getPidLowerLimit {
    out "?pidOUTL";
    in "<PID out limit min max: %f %*f";
}

setPidLowerLimit {
    out "?pidOUTL";
    in "<PID out limit min max: %(\$1PID:LIMIT:LOWER)f %(\$1PID:LIMIT:UPPER)f";
    out ">pidOUTL %2f %(\$1PID:LIMIT:UPPER)2f";
    in "<ack";
}


getPidUpperLimit {
    out "?pidOUTL";
    in "<PID out limit min max: %*f %f";
}

setPidUpperLimit {
    out "?pidOUTL";
    in "<PID out limit min max: %(\$1PID:LIMIT:LOWER)f %(\$1PID:LIMIT:UPPER)f";
    out ">pidOUTL %(\$1PID:LIMIT:LOWER)2f %2f";
    in "<ack";
}

getPidMode {
    out "?pidMODE";
    in "<pmode %{a|m}";
}

setPidMode {
    out ">pidMODE %{a|m}";
    in "<ack";
}

getPsuHeatAlarm {
    out "?alarmh";
    in "<%{off|on}";
}

getPsuVoltAlarm {
    out "?alarmv";
    in "<%{off|on}";
}

getCwStatus {
    out "?flowSt";
    in "<%{nok|ok}";
}

getCwFlow {
    out "?flowCw";
    in "<flow %f";
}

clearAlarms {
    out ">ackAlarm";
    in "<ack";
}

arbitrary {
    out "%(\$1ARBITRARY:SP)#s";
	InTerminator = "";
    ReadTimeout = 500;
    ReplyTimeout = 500;
	# Will always get a reply of some sort to a correct command.
	in "%(\$1ARBITRARY)32768c";
}

setPsuVoltage {
    out ">powV %2f";
    in "<ack";
}

getPsuVoltage {
    out "?powV";
    in "<powv %f";
}

setPsuCurrent {
    out ">powI %2f";
    in "<ack";
}

getPsuCurrent {
    out "?powI";
    in "<powa %f";
}

setOutput {
    out ">pidOUTM %2f";
    in "<ack";
}

getOutput {
    InTerminator = "";
    ReadTimeout = 200;
    
    out "?pidOUTM";
    in "<pidoutm %f";
}

setControlMode {
    out ">pow%{L|R}";
    in "<ack";
}

getControlMode {
    out "?powRL";
    in "<%{local|remote}";
}

setPsuPower {
    out ">pow%{OFF|ON}";
    in "<ack";
}

getPsuPower {
    out "?powOnOff";
    in "<%{off|on}"
}

setPsuFan {
    out ">fan%{OFF|ON}";
    in "<ack";
}

getPsuFan {
    out "?fanOnOff";
    in "<%{off|on}";
}

setHf {
    out ">osc%{OFF|ON}";
    in "<ack";
}

getHf {
    out "?oscOnOff";
    in "<%{off|on}";
}

setPidRunning {
    out ">pid%{STP|RUN}";
    in "<ack";
}

getRunStatus {
    out "?pidRUN";
    in "<%{off|on}";
}
