record(bo, "$(P)SIM") {
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}

record(bo, "$(P)DISABLE") {
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

record(stringin, "$(P)VERSION") {
    field(DESC, "Controller software version")
    field(INP, "@indfurn.proto getVersion($(P)NAME) $(PORT)")
    field(SCAN, "10 second")
    field(PINI, "YES")
    field(DTYP, "stream")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VERSION")
    field(SDIS, "$(P)DISABLE")
}

record(stringin, "$(P)NAME") {
    field(DESC, "Controller name")
}



# Main device temperature

record(ai, "$(P)TEMP") {
    field(DESC, "Temperature")
    field(SCAN, "1 second")
    field(INP, "@indfurn.proto getTcTemp $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "C")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TEMP")
    field(SDIS, "$(P)DISABLE")
    
    field(HIGH, "1801")
    field(LOW, "10")
    field(HSV, "MAJOR")
    field(LSV, "MAJOR")
    
    info(archive, "VAL")
    info(interest, "HIGH")
}

record(ao, "$(P)TEMP:SP") {
    field(DESC, "Temperature setpoint")
    field(OUT, "@indfurn.proto setSp $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "C")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TEMP:SP")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
}

record(ai, "$(P)TEMP:SP:RBV") {
    field(DESC, "Temperature setpoint readback")
    field(SCAN, "1 second")
    field(INP, "@indfurn.proto getSp $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "C")
    
    field(HIGH, "1801")
    field(LOW, "10")
    field(HSV, "MAJOR")
    field(LSV, "MAJOR")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TEMP:SP:RBV")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
}



# Diagnostic temperatures

record(ai, "$(P)PIPE:TEMP") {
    field(DESC, "Pipe temperature")
    field(SCAN, "5 second")
    field(INP, "@indfurn.proto getPipeTemp $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "C")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PIPE:TEMP")
    field(SDIS, "$(P)DISABLE")
    
    field(HIGH, "45")
    field(HSV, "MINOR")
    field(HIHI, "47.5")
    field(HHSV, "MAJOR")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ai, "$(P)CAPACITOR:TEMP") {
    field(DESC, "Capacitor bank temperature")
    field(SCAN, "5 second")
    field(INP, "@indfurn.proto getCapacitorTemp $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "C")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CAPACITOR:TEMP")
    field(SDIS, "$(P)DISABLE")
    
    field(HIGH, "80")
    field(HSV, "MINOR")
    field(HIHI, "85")
    field(HHSV, "MAJOR")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ai, "$(P)FET:TEMP") {
    field(DESC, "Switch element (FET) temperature")
    field(SCAN, "5 second")
    field(INP, "@indfurn.proto getFetTemp $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "C")
    
    field(HIGH, "80")
    field(HSV, "MINOR")
    field(HIHI, "85")
    field(HHSV, "MAJOR")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FET:TEMP")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}





record(bi, "$(P)PID:DIRECTION") {
    field(DESC, "PID controller direction")
    field(INP, "@indfurn.proto getPidDir $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(ZNAM, "Heating")
    field(ONAM, "Cooling")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:DIRECTION")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "HIGH")
}

record(bo, "$(P)PID:DIRECTION:SP") {
    field(OUT, "@indfurn.proto setPidDir $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Heating")
    field(ONAM, "Cooling")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:DIRECTION:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)OUTPUT") {
    field(DESC, "Power supply output")
    field(INP, "@indfurn.proto getOutput $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(PREC, "2")
    field(EGU, "%")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:OUTPUT")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ao, "$(P)OUTPUT:SP") {
    field(OUT, "@indfurn.proto setOutput $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "%")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:OUTPUT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)PID:LIMIT:LOWER") {
    field(DESC, "Lower limit of PID output")
    field(INP, "@indfurn.proto getPidLowerLimit $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(PREC, "2")
    field(EGU, "V")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:LIMIT:LOWER")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ao, "$(P)PID:LIMIT:LOWER:SP") {
    field(OUT, "@indfurn.proto setPidLowerLimit($(P)) $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "V")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:LIMIT:LOWER:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)PID:LIMIT:UPPER") {
    field(DESC, "Upper limit of PID output")
    field(INP, "@indfurn.proto getPidUpperLimit $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(PREC, "2")
    field(EGU, "V")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:LIMIT:UPPER")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ao, "$(P)PID:LIMIT:UPPER:SP") {
    field(OUT, "@indfurn.proto setPidUpperLimit($(P)) $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "V")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:LIMIT:UPPER:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)PSU:VOLT") {
    field(DESC, "Power supply voltage")
    field(INP, "@indfurn.proto getPsuVoltage $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(PREC, "2")
    field(EGU, "V")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:VOLT")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ao, "$(P)PSU:VOLT:SP") {
    field(OUT, "@indfurn.proto setPsuVoltage $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "V")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:VOLT:SP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)PSU:CURR") {
    field(DESC, "Maximum power supply current")
    field(INP, "@indfurn.proto getPsuCurrent $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(PREC, "2")
    field(EGU, "A")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:CURR")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(ao, "$(P)PSU:CURR:SP") {
    field(OUT, "@indfurn.proto setPsuCurrent $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "A")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:CURR:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)PID:MODE") {
    field(DESC, "Mode of PID controller")
    field(INP, "@indfurn.proto getPidMode $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(ZNAM, "Automatic")
    field(ONAM, "Manual")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:MODE")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(bo, "$(P)PID:MODE:SP") {
    field(OUT, "@indfurn.proto setPidMode $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Automatic")
    field(ONAM, "Manual")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:MODE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(longin, $(P)SAMPLETIME) {
    field(DESC, "PID controller sample time")
    field(SCAN, "1 second")
    field(INP, "@indfurn.proto getSampleTime $(PORT)")
    field(DTYP, "stream")
    field(EGU, "ms")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SAMPLETIME")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(longout, "$(P)SAMPLETIME:SP") {
    field(OUT, "@indfurn.proto setSampleTime $(PORT)")
    field(DTYP, "stream")
    field(EGU, "ms")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:SAMPLETIME:SP")
    field(SDIS, "$(P)DISABLE")
}


#
# Alarms from hardware
#
record(bi, "$(P)ALARM:PSUTEMP") {
    field(DESC, "Power supply overtemp alarm")
    field(SCAN, "1 second")
    field(INP, "@indfurn.proto getPsuHeatAlarm $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(OSV, "MAJOR")
    info("ALARM", "INDFURN")
    info(archive, "VAL")
}

record(bi, "$(P)ALARM:PSUVOLT") {
    field(DESC, "Power supply overvolt alarm")
    field(SCAN, "1 second")
    field(INP, "@indfurn.proto getPsuVoltAlarm $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "OK")
    field(ONAM, "ALARM")
    field(OSV, "MAJOR")
    info("ALARM", "INDFURN")
    info(archive, "VAL")
}

record(bo, "$(P)ALARM:CLEAR") {
    field(OUT, "@indfurn.proto clearAlarms $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "CLEAR")
    field(ONAM, "CLEAR")
}

record(bi, "$(P)COOLINGWATER:STATUS") {
    field(DESC, "Status of cooling water flow")
    field(SCAN, "1 second")
    field(INP, "@indfurn.proto getCwStatus $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "ALARM")
    field(ONAM, "OK")
    field(ZSV, "MAJOR")
    info("ALARM", "INDFURN")
    info(archive, "VAL")
}

record(ai, "$(P)COOLINGWATER:FLOW") {
    field(DESC, "Cooling water flow rate")
    field(SCAN, "5 second")
    field(INP, "@indfurn.proto getCwFlow $(PORT)")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "ml/min")
    info(archive, "VAL")
    field(HIGH, "10000")
    field(LOW, "100")
    field(HSV, "MAJOR")
    field(LSV, "MAJOR")
}


#
# Arbitrary commands
#


record(waveform, "$(P)ARBITRARY:SP")
{
    field(DESC, "Arbitrary command input")
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(FLNK, "$(P)ARBITRARY:SP:TRIGGER")
    field(ASG, "$(ARBITRARY_ASG)")
}

record(calcout, "$(P)ARBITRARY:SP:TRIGGER")
{
    field(INPA, "$(P)ARBITRARY:SP.NORD")
	# Only send if length of command is
	# Use greater than one to account for null terminator
	field(CALC, "A > 1") 
	field(OOPT, "When Non-zero")
    field(DTYP, "stream")
    field(OUT,  "@indfurn.proto arbitrary($(P)) $(PORT)")
}

record(waveform, "$(P)ARBITRARY")
{
    field(DESC, "Arbitrary command response")
    field(NELM, "32768")
    field(FTVL, "CHAR")
    field(PINI, "YES")
}

record(bo, "$(P)PSU:CONTROLMODE:SP") {
    field(DESC, "Power supply control mode")
    field(OUT, "@indfurn.proto setControlMode $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Local")
    field(ONAM, "Remote")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:CONTROLMODE:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)PSU:CONTROLMODE") {
    field(DESC, "Power supply control mode")
    field(INP, "@indfurn.proto getControlMode $(PORT)")
    field(SCAN, "2 second")
    field(DTYP, "stream")
    field(ZNAM, "Local")
    field(ONAM, "Remote")
    field(ZSV, "MAJOR")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:CONTROLMODE")
    field(SDIS, "$(P)DISABLE")
    
    info(alarm, "INDFURN")
    info(archive, "VAL")
}

record(bo, "$(P)PSU:POWER:SP") {
    field(DESC, "Set power supply status")
    field(OUT, "@indfurn.proto setPsuPower $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Off")
    field(ONAM, "On")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:POWER:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)PSU:POWER") {
    field(DESC, "Get power supply status")
    field(INP, "@indfurn.proto getPsuPower $(PORT)")
    field(SCAN, "2 second")
    field(DTYP, "stream")
    field(ZNAM, "Off")
    field(ONAM, "On")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:POWER")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
}

record(bo, "$(P)PSU:FAN:SP") {
    field(DESC, "Power supply fan status")
    field(OUT, "@indfurn.proto setPsuFan $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(ZSV, "MAJOR")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:FAN:SP")
    field(SDIS, "$(P)DISABLE")
    
    info(alarm, "INDFURN")
}

record(bi, "$(P)PSU:FAN") {
    field(DESC, "Power supply fan status")
    field(INP, "@indfurn.proto getPsuFan $(PORT)")
    field(SCAN, "2 second")
    field(DTYP, "stream")
    field(ZNAM, "Off")
    field(ZSV, "MAJOR")
    field(ONAM, "On")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:FAN")
    field(SDIS, "$(P)DISABLE")
    
    info(alarm, "INDFURN")
    info(archive, "VAL")
}

record(bo, "$(P)PSU:HF:SP") {
    field(DESC, "HF heater oscillation status")
    field(OUT, "@indfurn.proto setHf $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Off")
    field(ONAM, "On")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:HF:SP")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)PSU:HF") {
    field(DESC, "HF heater oscillation status")
    field(INP, "@indfurn.proto getHf $(PORT)")
    field(SCAN, "2 second")
    field(DTYP, "stream")
    field(ZNAM, "Off")
    field(ONAM, "On")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PSU:FAN")
    field(SDIS, "$(P)DISABLE")
    info(archive, "VAL")
}

record(bi, "$(P)PID:RUNNING") {
    field(DESC, "PID controller run status")
    field(INP, "@indfurn.proto getRunStatus $(PORT)")
    field(DTYP, "stream")
    field(SCAN, "2 second")
    field(ZNAM, "Stopped")
    field(ONAM, "Running")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:RUNNING")
    field(SDIS, "$(P)DISABLE")
    
    info(archive, "VAL")
    info(interest, "LOW")
}

record(bo, "$(P)PID:RUNNING:SP") {
    field(OUT, "@indfurn.proto setPidRunning $(PORT)")
    field(DTYP, "stream")
    field(ZNAM, "Stopped")
    field(ONAM, "Running")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PID:RUNNING:SP")
    field(SDIS, "$(P)DISABLE")
}

#
# Simulation records
#

record(stringout, "$(P)SIM:VERSION") {}

record(ao, "$(P)SIM:PIPE:TEMP") {}
record(ao, "$(P)SIM:CAPACITOR:TEMP") {}
record(ao, "$(P)SIM:FET:TEMP") {}

record(ao, "$(P)SIM:TEMP") {}
alias("$(P)SIM:TEMP", "$(P)SIM:TEMP:SP")
alias("$(P)SIM:TEMP", "$(P)SIM:TEMP:SP:RBV")

record(ao, "$(P)SIM:SAMPLETIME") {}
alias("$(P)SIM:SAMPLETIME", "$(P)SIM:SAMPLETIME:SP")

record(ao, "$(P)SIM:PID:LIMIT:LOWER") {}
alias("$(P)SIM:PID:LIMIT:LOWER", "$(P)SIM:PID:LIMIT:LOWER:SP")

record(ao, "$(P)SIM:OUTPUT") {}
alias("$(P)SIM:OUTPUT", "$(P)SIM:OUTPUT:SP")

record(ao, "$(P)SIM:PID:LIMIT:UPPER") {}
alias("$(P)SIM:PID:LIMIT:UPPER", "$(P)SIM:PID:LIMIT:UPPER:SP")

record(bo, "$(P)SIM:PID:DIRECTION") {}
alias("$(P)SIM:PID:DIRECTION", "$(P)SIM:PID:DIRECTION:SP")

record(bo, "$(P)SIM:PID:RUNNING:SP") {}
alias("$(P)SIM:PID:RUNNING:SP", "$(P)SIM:PID:RUNNING")

record(bo, "$(P)SIM:PID:MODE") {}
alias("$(P)SIM:PID:MODE", "$(P)SIM:PID:MODE:SP")

record(ao, "$(P)SIM:PSU:VOLT") {}
alias("$(P)SIM:PSU:VOLT", "$(P)SIM:PSU:VOLT:SP")

record(ao, "$(P)SIM:PSU:CURR") {}
alias("$(P)SIM:PSU:CURR", "$(P)SIM:PSU:CURR:SP")

record(bo, "$(P)SIM:PSU:CONTROLMODE:SP") {}
alias("$(P)SIM:PSU:CONTROLMODE:SP", "$(P)SIM:PSU:CONTROLMODE")

record(bo, "$(P)SIM:PSU:POWER:SP") {}
alias("$(P)SIM:PSU:POWER:SP", "$(P)SIM:PSU:POWER")

record(bo, "$(P)SIM:PSU:FAN:SP") {}
alias("$(P)SIM:PSU:FAN:SP", "$(P)SIM:PSU:FAN")

record(bo, "$(P)SIM:PSU:HF:SP") {}
alias("$(P)SIM:PSU:HF:SP", "$(P)SIM:PSU:HF")
